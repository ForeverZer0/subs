#!/usr/bin/env ruby

require 'optparse'
require 'rainbow'

require_relative '../lib/subs'

options = { paths: [], lang: [], method: :hash }

OptParse.new do |opts|

  opts.on('-iPATH', '--include=PATH', String, 'Directory/filename to include (default: working directory)') do |path|
    options[:paths] << path
  end

  opts.on('-lLANG', '--lang=LANG', String, 'Select language(s) to search for (default: eng)') do |lang|
    size = lang.size
    language = nil
    if size == 2
      language = Subs::Language.from_iso639_1(lang)
    elsif size == 3
      language = Subs::Language.from_iso639_2(lang)
    end
    if language.nil? && !options[:quiet]
      opts.warn "\"#{lang}\" is not a valid ISO-639-1 or ISO-639-2 language identifier, ignoring"
    else
      options[:lang] << language
    end
  end

  opts.on('-r', '--recursive', TrueClass, 'Search directories recursively') do |recursive|
    options[:recursive] = recursive
  end

  opts.on('-c', '--clobber', TrueClass, 'Force overwrite of any existing subtitles') do |clobber|
    options[:clobber] = clobber
  end

  opts.on('-q', '--quiet', TrueClass, 'Do not write progress to the standard output stream') do |quiet|
    abort('--quiet and --prompt flags are mutually exclusive') if options[:prompt]
    options[:quiet] = quiet
  end

  opts.on('-p', '--prompt', TrueClass, 'Prompt before downloading each subtitle') do |prompt|
    abort('--quiet and --prompt flags are mutually exclusive') if options[:quiet]
    options[:prompt] = prompt
  end

  opts.on('-l', '--list', 'List all possible language codes that can be used') do
    langs = Subs::Language.values.sort_by(&:iso639_2)
    half = (langs.size / 2) + 1
    (0...half).each do |i|
      left = langs[i]
      right = langs[i + half] || Subs::Language.new(nil, nil, nil)
      ln = left.name[0, 26]
      printf("%s - %-30s %s %s %-30s\n", Rainbow(left.iso639_2).cyan.bright, ln,
             Rainbow(right.iso639_2).cyan.bright, right.name.nil? ? '' : '-', right.name)
    end
  end

  opts.on('-m(hash|name)', '--method=(hash|name)', 'Select the search method (default: hash)') do |meth|
    options[:method] = meth.casecmp('name').zero? ? :name : :hash
  end

end.parse!

options[:paths] << Dir.pwd if options[:paths].empty?
options[:lang] << Subs::Language.from_iso639_2('eng') if options[:lang].empty?

QUIET = options[:quiet]

def log(text)
  puts text unless QUIET
end

def get_choices
  line = gets.chomp
  return [] if line.empty?
  line.split(',').map { |i| i.strip.to_i - 1 }
end

def status(text)
  $stdout << text unless QUIET
end

def warning(text)
  puts Rainbow(text).yellow unless QUIET
end

# Compile list of videos to process
videos = options[:paths].flat_map do |path|
  if File.directory?(path)
    Subs.video_search(path, options[:recursive])
  else
    [File.expand_path(path)]
  end
end

# Reject videos that already have subtitles unless "clobber" option is present
count = videos.count
log("Found #{count} videos to process.")
unless options[:clobber]
  videos.reject! { |v| Subs.subtitle_exist?(v, *options[:lang]) }
  if videos.count != count
    log("Subtitles found for #{count - videos.count} videos, #{Rainbow('skipping').yellow}.")
  end
end

provider = Subs::OpenSubtitles # TODO
unless provider.connect(options[:lang].first)
  raise Exception, 'failed to connect to provider'
end


videos.each do |video|
  # Gets results using selected provider and method
  status("Processing \"#{File.basename(video)}\"...")
  results = options[:method] == :name ?
                provider.name_search(video, *options[:lang]) :
                provider.hash_search(video, *options[:lang])

  # Continue if no results were found
  if results.empty?
    status(" #{Rainbow('No Results').red}\n")
    next
  end

  if options[:prompt]
    log(Rainbow(" Found #{results.size}").green.bright)
    log(Rainbow("    Select number of file(s) to download (separate with commas):").aqua)
    results.each_with_index do |result, i|
      log("    #{Rainbow("#{i + 1})").bright} #{result.name}")
    end
    choices = get_choices.map { |i| results[i] }.compact
  else
    choices = [results.first]
  end

  if choices.empty?
    log(Rainbow('Skipping').yellow)
    next
  end



  # Process subtitle file(s)
  # choice.each do |result|
  #
  #
  # end
  #
  p choices

end




